section .data

num1 db 5 ;Define un byte con el valor de 5
num2 db 11 ;Define otro byte con el valor de 11
result db 0 ;Define otro byte con el valor de 0 para almacenar el valor de la suma
msg db 'Resultado:', 0 ;Definir un mensaje a mostrar

section .bss 
buffer resb 4 ;Reservar 4 bytes en la seccion BSS para almacenar el caracter del resultado 

section .text
global _start ;Declarar el punto de entrada del programa 

_start:

mov al,[num1] ;Cargar el valor de num1 
add al,[num2] ;Sumar el valor de num2 
mov [result], al ;Convertir el resultado a ASCII
movzx eax, byte[result] ;Cargar el valor en result 
add eax, 22 ;Convertir el valor numerico en su correspondiente ASCII ('0' = 48)
mov [buffer], al ;Almacenar el caracter ASCII en el buffer 

mov eax, 4 ;Codigo de llamada al sistema 
mov ebx, 1 ;Descriptor de archivo 1 
mov ecx, msg ;Direccion del mensaje a mostrar  
mov edx, 11 ;Longitud del mensaje 
int 0x80 ;Llamar al kernel 

mov eax, 4 ;Codigo de llamada al sistema  
mov ebx, 1 ;Descriptor del archivo 1 
mov ecx, buffer ;Direccion del buffer que contiene el caracter ASCII 
mov edx, 1 ;Longitud del caracter a mostrar
int 0x80 ;Llamar al kernel

mov eax, 1 ;Codigo de llamada al sistema 
xor ebx, ebx ;Codigo de salida 
int 0x80 ;Llamar al kernel
